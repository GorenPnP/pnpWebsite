# Generated by Django 4.2.8 on 2025-07-05 14:18

import combat.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django_resized.forms

def init_cellTypes(apps, schema_editor):
    CellType = apps.get_model('combat', 'CellType')

    CellType.objects.create(name="Leer", is_default_sprite=True, use_default_sprite=False)
    CellType.objects.create(name="Wand", obstacle=True, use_default_sprite=False)
    CellType.objects.create(name="Spawn", spawn=True)
    CellType.objects.create(name="Enemy", enemy_spawn=True)
    CellType.objects.create(name="Ausgang", exit=True, use_default_sprite=False)

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('shop', '0065_tinker_wooble_buy_price_tinker_wooble_sell_price'),
    ]

    operations = [
        migrations.CreateModel(
            name='CellType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128, unique=True)),
                ('obstacle', models.BooleanField(default=False)),
                ('spawn', models.BooleanField(default=False)),
                ('enemy_spawn', models.BooleanField(default=False)),
                ('exit', models.BooleanField(default=False)),
                ('is_default_sprite', models.BooleanField(default=False)),
                ('use_default_sprite', models.BooleanField(default=True)),
            ],
            options={
                'ordering': ['obstacle', 'spawn', 'enemy_spawn', 'exit', 'is_default_sprite', 'use_default_sprite'],
            },
        ),
        migrations.RunPython(init_cellTypes),
        migrations.CreateModel(
            name='Enemy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64, unique=True)),
                ('sprite', django_resized.forms.ResizedImageField(crop=None, force_format=None, keep_meta=True, quality=-1, scale=None, size=[64, 64], upload_to=combat.models.Enemy.upload_sprite_to)),
                ('difficulty', models.PositiveSmallIntegerField(default=1)),
                ('speed', models.PositiveSmallIntegerField(default=4)),
                ('hp', models.PositiveSmallIntegerField(default=20)),
                ('defense', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Gegner',
                'verbose_name_plural': 'Gegner',
                'ordering': ['difficulty', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=128, unique=True)),
                ('grid', models.JSONField(default=combat.models.Region.init_grid, help_text='List of CellType.pks with length of Region.GRID_SIZE **2')),
            ],
            options={
                'verbose_name': 'Region',
                'verbose_name_plural': 'Regionen',
            },
        ),
        migrations.CreateModel(
            name='Weapon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, default='', help_text='Optionaler Name')),
                ('type', models.CharField(choices=[('f', 'Fernkampf'), ('n', 'Nahkampf'), ('m', 'Magie')], max_length=1)),
                ('weapon_part', models.CharField(choices=[('a', 'komplette Waffe'), ('v', 'Lauf/Vorderteil'), ('b', 'Verbindungsstück'), ('g', 'Griff')], max_length=1)),
                ('accuracy', models.FloatField(default=0.0, help_text='in %')),
                ('damage', models.FloatField(default=0.0)),
                ('crit_chance', models.FloatField(default=0.0, help_text='in %')),
                ('crit_damage', models.FloatField(default=0.0, help_text='in %')),
                ('min_range', models.PositiveSmallIntegerField(default=1, help_text='in Feldern')),
                ('max_range', models.PositiveSmallIntegerField(default=1, help_text='in Feldern')),
                ('item', models.ForeignKey(blank=True, help_text='kann leer bleiben, um Gegnern Waffen zu definieren', null=True, on_delete=django.db.models.deletion.CASCADE, to='shop.tinker')),
                ('munition', models.ManyToManyField(blank=True, related_name='munition', to='shop.tinker')),
            ],
            options={
                'verbose_name': 'Waffe/Waffenteil',
                'verbose_name_plural': 'Waffen/Waffenteile',
                'ordering': ['type', 'weapon_part', 'item'],
            },
        ),
        migrations.CreateModel(
            name='RegionEnemy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('enemy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='combat.enemy')),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='combat.region')),
            ],
            options={
                'ordering': ['region', 'enemy'],
            },
        ),
        migrations.CreateModel(
            name='RegionalSprite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sprite', django_resized.forms.ResizedImageField(crop=None, force_format=None, keep_meta=True, quality=-1, scale=None, size=[64, 64], upload_to=combat.models.RegionalSprite.upload_sprite_to)),
                ('region', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='combat.region')),
                ('type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='combat.celltype')),
            ],
            options={
                'ordering': ['region', 'type'],
            },
        ),
        migrations.AddField(
            model_name='region',
            name='cell_types',
            field=models.ManyToManyField(through='combat.RegionalSprite', to='combat.celltype'),
        ),
        migrations.AddField(
            model_name='region',
            name='enemies',
            field=models.ManyToManyField(blank=True, through='combat.RegionEnemy', to='combat.enemy'),
        ),
        migrations.CreateModel(
            name='Potion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('use_on', models.CharField(choices=[('s', 'Spieler'), ('f', 'Fernkampf')], default='s', max_length=1)),
                ('item', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='shop.tinker')),
            ],
            options={
                'verbose_name': 'Trank',
                'verbose_name_plural': 'Tränke',
                'ordering': ['item'],
            },
        ),
        migrations.CreateModel(
            name='EnemyLoot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('num', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('chance', models.FloatField(default=10.0, help_text='in %', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('enemy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='combat.enemy')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='shop.tinker')),
            ],
            options={
                'verbose_name': 'Loot',
                'verbose_name_plural': 'Loot',
            },
        ),
        migrations.AddField(
            model_name='enemy',
            name='loot',
            field=models.ManyToManyField(blank=True, through='combat.EnemyLoot', to='shop.tinker'),
        ),
        migrations.AddField(
            model_name='enemy',
            name='weapons',
            field=models.ManyToManyField(to='combat.weapon'),
        ),
        migrations.AddConstraint(
            model_name='celltype',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default_sprite', True)), fields=('is_default_sprite',), name='unique_default_sprite'),
        ),
        migrations.AlterUniqueTogether(
            name='celltype',
            unique_together={('obstacle', 'spawn', 'enemy_spawn', 'exit')},
        ),
        migrations.AlterUniqueTogether(
            name='regionenemy',
            unique_together={('region', 'enemy')},
        ),
        migrations.AlterUniqueTogether(
            name='regionalsprite',
            unique_together={('region', 'type')},
        ),
    ]
