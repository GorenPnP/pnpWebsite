/*
Include in {% block absolute %} in html templates.
relies on base/dice_spinner.css.

{% block absolute %}
	{% include 'base/dice-spinner.html' %}
{% endblock %}

{% block head_extra %}
	<link rel="stylesheet" href="{% static 'base/css/dice_spinner.css' %}" type="text/css">
{% endblock %}

Enable by setting .spinner-container {display: flex}
Disable by setting .spinner-container {display: none}

It does not show by default.
*/
:root {
		--dice-size: 7vw;
		--dice-size-mobile: 15vw;

		--dice-face-padding: calc(var(--dice-size) * 0.1);
		--dice-point-size: calc(var(--dice-size) * 0.2);

		--dice-bg: white;
		--dice-point-color: black;
		--dice-border: 1px solid #333;
}

*, *::before, *::after {
	padding: 0;
	margin: 0;
}

.spinner-container {
	z-index: 8;

	// cover whole viewport and stick on scroll
	width: 100vw;
	height: 100vh;
	background: rgba(1, 1, 1, .7);

	position: fixed;
	top: 0;
	left: 0;

	// center dice
	display: flex;
	justify-content: center;
	align-items: center;

	// perspective for dice
	perspective: calc(var(--dice-size) * 10);
	perspective-origin: 50%;
}
.dice {
	width: var(--dice-size);

	height: var(--dice-size);

	position: relative;
	transform-style: preserve-3d;
	animation: rotate ease-in-out 4s infinite;
}
@keyframes rotate {
	100% {transform: rotateY(360deg) rotateX(360deg) rotateZ(360deg)}
}
.face {
	background-color: var(--dice-bg);
	border: var(--dice-border);

	width: var(--dice-size);
	height: var(--dice-size);
	box-sizing: border-box;
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	right: 0;
}

.front {
	transform: translateZ(calc(var(--dice-size) / 2));
}
.back {
	transform: translateZ(calc(var(--dice-size) / -2)) rotateY(180deg);
}
.left {
	transform: rotateY(270deg) translateX(calc(var(--dice-size) / -2));
	transform-origin: center left;
}
.right {
	transform: rotateY(-270deg) translateX(calc(var(--dice-size) / 2));
	transform-origin: top right;
}
.top {
	transform: rotateX(270deg) translateY(calc(var(--dice-size) / -2));
	transform-origin: top center;
}
.bottom {
	transform: rotateX(90deg) translateY(calc(var(--dice-size) / 2));
	transform-origin: bottom center;
}

// points and their positioning
.face>div {
	background: var(--dice-point-color);
	height: var(--dice-point-size);
	width: var(--dice-point-size);
	border-radius: 50%;
	position: absolute;
}

// top left
.left>div:first-child, .back>div:first-child, .right>div:first-child, .bottom>div:first-child {
	top: var(--dice-face-padding);
	left: var(--dice-face-padding);
}

// top right
.front>div:first-child, .left>div:nth-child(2), .back>div:nth-child(2), .bottom>div:nth-child(3) {
	top: var(--dice-face-padding);
	right: var(--dice-face-padding);
}

// bottom left
.front>div:last-child, .left>div:nth-child(3), .back>div:nth-child(4), .bottom>div:nth-child(4) {
	bottom: var(--dice-face-padding);
	left: var(--dice-face-padding);
}

// bottom right
.left>div:last-child, .back>div:nth-child(5), .right>div:last-child, .bottom>div:last-child {
	bottom: var(--dice-face-padding);
	right: var(--dice-face-padding);
}

// center
.back>div:nth-child(3), .right>div:nth-child(2), .top>div {
	top: calc(50% - var(--dice-point-size) / 2);
	left: calc(50% - var(--dice-point-size) / 2);
}

// top center
.bottom>div:nth-child(2) {
	top: var(--dice-face-padding);
	left: calc(50% - var(--dice-point-size) / 2);
}

// bottom center
.bottom>div:nth-child(5) {
	left: calc(50% - var(--dice-point-size) / 2);
	bottom: var(--dice-face-padding);
}

@media only screen and (max-width: 600px) {:root {--dice-size: var(--dice-size-mobile);} }
